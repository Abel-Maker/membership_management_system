<?php
//节日信息
function printHoliday($year, $month, $day) {
    $jieri = '';
    $year = intval($year);
    $month = intval($month);
    $day = intval($day);

    //阳历固定节日
    $ylgdjr = array(
        '11' => '元旦',
        '214' => '情人节',
        '38' => '妇女节',
        '312' => '植树节',
        '41' => '愚人节',
        '51' => '劳动节',
        '54' => '青年节',
        '61' => '儿童节',
        '71' => '建党节',
        '81' => '建军节',
        '910' => '教师节',
        '101' => '国庆节',
        '1224' => '平安夜',
        '1225' => '圣诞节'
    );

    if (in_array($month . $day, array_keys($ylgdjr))) {
        $jieri = $ylgdjr[$month . $day];
    } else {
        //农历节日
        $nongli = getLunarCalendar($year, $month, $day);
        switch ($nongli['displaymonth']) {
            case "一月":
                switch ($nongli['day']) {
                    case 1:
                        $jieri = "春节";
                        break;
                    case 15:
                        $jieri = "元宵节";
                        break;
                }
                break;
            case "二月":
                switch ($nongli['day']) {
                    case 2:
                        $jieri = "龙抬头";
                        break;
                }
                break;
            case "三月":
                break;
            case "四月":
                break;
            case "五月":
                switch ($nongli['day']) {
                    case 5:
                        $jieri = "端午节";
                        break;
                }
                break;
            case "六月":
                break;
            case "七月":
                switch ($nongli['day']) {
                    case 7:
                        $jieri = "七夕";
                        break;
                }
                break;
            case "八月":
                switch ($nongli['day']) {
                    case 15:
                        $jieri = "中秋节";
                        break;
                }
                break;
            case "九月":
                switch ($nongli['day']) {
                    case 9:
                        $jieri = "重阳节";
                        break;
                }
                break;
            case "十月":
                break;
            case "十一月":
                break;
            case "十二月":
                switch ($nongli['day']) {
                    case 8:
                        $jieri = "腊八";
                        break;
                    case 25:
                        $jieri = "小年";
                        break;
                }
                if (($nongli['day'] == 30) || (($nongli['day'] == 29) && ($nongli['dayNumOfMonth'] == 29))) {
                    $jieri = "除夕";
                }
                break;
        }
    }

    echo $jieri == '' ? '' : '<span class="jiejiari">' . $jieri . '</span>';
}

//返回农历信息
function getLunarCalendar($year, $month, $day) {
    // 农历每月的天数
    $everymonth = array(
        0 => array(8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 7, 1),
        1 => array(0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29, 0, 8, 2),
        2 => array(0, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 0, 9, 3),
        3 => array(5, 29, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 10, 4),
        4 => array(0, 30, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 0, 1, 5),
        5 => array(0, 30, 30, 29, 30, 30, 29, 29, 30, 29, 30, 29, 30, 0, 2, 6),
        6 => array(4, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 3, 7),
        7 => array(0, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 0, 4, 8),
        8 => array(0, 30, 29, 29, 30, 30, 29, 30, 29, 30, 30, 29, 30, 0, 5, 9),
        9 => array(2, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29, 30, 6, 10),
        10 => array(0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29, 0, 7, 11),
        11 => array(6, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 8, 12),
        12 => array(0, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 0, 9, 1),
        13 => array(0, 30, 30, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 0, 10, 2),
        14 => array(5, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 29, 30, 1, 3),
        15 => array(0, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 0, 2, 4),
        16 => array(0, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 0, 3, 5),
        17 => array(2, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30, 29, 4, 6),
        18 => array(0, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 0, 5, 7),
        19 => array(7, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 30, 6, 8),
        20 => array(0, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 0, 7, 9),
        21 => array(0, 30, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 0, 8, 10),
        22 => array(5, 30, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 9, 11),
        23 => array(0, 29, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 0, 10, 12),
        24 => array(0, 29, 30, 30, 29, 30, 30, 29, 30, 29, 30, 29, 29, 0, 1, 1),
        25 => array(4, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30, 29, 30, 2, 2),
        26 => array(0, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 0, 3, 3),
        27 => array(0, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30, 30, 0, 4, 4),
        28 => array(2, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 30, 5, 5),
        29 => array(0, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 0, 6, 6),
        30 => array(6, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 29, 7, 7),
        31 => array(0, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 0, 8, 8),
        32 => array(0, 30, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 0, 9, 9),
        33 => array(5, 29, 30, 30, 29, 30, 30, 29, 30, 29, 30, 29, 29, 30, 10, 10),
        34 => array(0, 29, 30, 29, 30, 30, 29, 30, 29, 30, 30, 29, 30, 0, 1, 11),
        35 => array(0, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 0, 2, 12),
        36 => array(3, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 30, 29, 3, 1),
        37 => array(0, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 29, 0, 4, 2),
        38 => array(7, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 5, 3),
        39 => array(0, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 0, 6, 4),
        40 => array(0, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 0, 7, 5),
        41 => array(6, 30, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 8, 6),
        42 => array(0, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 0, 9, 7),
        43 => array(0, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 0, 10, 8),
        44 => array(4, 30, 29, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 1, 9),
        45 => array(0, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 29, 30, 0, 2, 10),
        46 => array(0, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 0, 3, 11),
        47 => array(2, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 4, 12),
        48 => array(0, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 0, 5, 1),
        49 => array(7, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 6, 2),
        50 => array(0, 29, 30, 30, 29, 30, 30, 29, 29, 30, 29, 30, 29, 0, 7, 3),
        51 => array(0, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 0, 8, 4),
        52 => array(5, 29, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 9, 5),
        53 => array(0, 29, 30, 29, 29, 30, 30, 29, 30, 30, 29, 30, 29, 0, 10, 6),
        54 => array(0, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 0, 1, 7),
        55 => array(3, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 2, 8),
        56 => array(0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 0, 3, 9),
        57 => array(8, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 4, 10),
        58 => array(0, 30, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 0, 5, 11),
        59 => array(0, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 0, 6, 12),
        60 => array(6, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 7, 1),
        61 => array(0, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 0, 8, 2),
        62 => array(0, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 29, 0, 9, 3),
        63 => array(4, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29, 10, 4),
        64 => array(0, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 0, 1, 5),
        65 => array(0, 29, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 0, 2, 6),
        66 => array(3, 30, 30, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 3, 7),
        67 => array(0, 30, 30, 29, 30, 30, 29, 29, 30, 29, 30, 29, 30, 0, 4, 8),
        68 => array(7, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 5, 9),
        69 => array(0, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 0, 6, 10),
        70 => array(0, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30, 0, 7, 11),
        71 => array(5, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29, 30, 8, 12),
        72 => array(0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30, 0, 9, 1),
        73 => array(0, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 0, 10, 2),
        74 => array(4, 30, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 1, 3),
        75 => array(0, 30, 30, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 0, 2, 4),
        76 => array(8, 30, 30, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 3, 5),
        77 => array(0, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 29, 0, 4, 6),
        78 => array(0, 30, 29, 30, 30, 29, 30, 30, 29, 30, 29, 30, 29, 0, 5, 7),
        79 => array(6, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30, 29, 6, 8),
        80 => array(0, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 0, 7, 9),
        81 => array(0, 29, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 0, 8, 10),
        82 => array(4, 30, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 9, 11),
        83 => array(0, 30, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 0, 10, 12),
        84 => array(10, 30, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 1, 1),
        85 => array(0, 29, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 0, 2, 2),
        86 => array(0, 29, 30, 30, 29, 30, 30, 29, 30, 29, 30, 29, 29, 0, 3, 3),
        87 => array(6, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30, 29, 29, 4, 4),
        88 => array(0, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 0, 5, 5),
        89 => array(0, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 30, 0, 6, 6),
        90 => array(5, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 30, 7, 7),
        91 => array(0, 29, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 0, 8, 8),
        92 => array(0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 0, 9, 9),
        93 => array(3, 29, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 10, 10),
        94 => array(0, 30, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 0, 1, 11),
        95 => array(8, 29, 30, 30, 29, 30, 29, 30, 30, 29, 29, 30, 29, 30, 2, 12),
        96 => array(0, 29, 30, 29, 30, 30, 29, 30, 29, 30, 30, 29, 29, 0, 3, 1),
        97 => array(0, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 0, 4, 2),
        98 => array(5, 30, 29, 29, 30, 29, 29, 30, 30, 29, 30, 30, 29, 30, 5, 3),
        99 => array(0, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 29, 0, 6, 4),
        100 => array(0, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 29, 0, 7, 5),
        101 => array(4, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 8, 6),
        102 => array(0, 30, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 0, 9, 7),
        103 => array(0, 30, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 0, 10, 8),
        104 => array(2, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 1, 9),
        105 => array(0, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 0, 2, 10),
        106 => array(7, 30, 29, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 3, 11),
        107 => array(0, 29, 29, 30, 29, 29, 30, 29, 30, 30, 30, 29, 30, 0, 4, 12),
        108 => array(0, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 0, 5, 1),
        109 => array(5, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 6, 2),
        110 => array(0, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 0, 7, 3),
        111 => array(0, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 0, 8, 4),
        112 => array(4, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 9, 5),
        113 => array(0, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30, 0, 10, 6),
        114 => array(9, 29, 30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30, 1, 7),
        115 => array(0, 29, 30, 29, 29, 30, 29, 30, 30, 30, 29, 30, 29, 0, 2, 8),
        116 => array(0, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 0, 3, 9),
        117 => array(6, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 4, 10),
        118 => array(0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 0, 5, 11),
        119 => array(0, 30, 29, 30, 29, 30, 29, 29, 30, 29, 29, 30, 30, 0, 6, 12),
        120 => array(4, 29, 30, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 7, 1)
    );

    // 农历天干
    $mten = array('null', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸');
    // 农历地支
    $mtwelve = array('null', '子(鼠)', '丑(牛)', '寅(虎)', '卯(兔)', '辰(龙)', '巳(蛇)', '午(马)', '未(羊)', '申(猴)', '酉(鸡)', '戌(狗)', '亥(猪)');
    // 农历月份
    $mmonth = array('闰', '正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二', '月');
    // 农历日
    $mday = array('null', '初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十',
        '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十',
        '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十');

    // 星期
    $weekday = array('星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六');
    // 阳历总天数 至1900年12月21日
    $total = 11;

    // 阴历总天数
    $mtotal = 0;
    $year = intval($year);
    $month = intval($month);
    $day = intval($day);

    if ($year < 1901 || $year > 2020 || $month < 1 || $month > 12 || $day < 1 || $day > 31) {
        //exit('年份或者格式出错，年份只支持1901到2020!');
        exit;
    }

    // 获得日期时间戳
    $postDate = mktime(0, 0, 0, $month, $day, $year);

    $thisDay = getdate($postDate);

    $cur_wday = $thisDay['wday'];

    for ($y = 1901; $y < $thisDay["year"]; $y++) {
        // 计算到所求日期阳历的总天数-自1900年12月21日始,先算年的和
        $total += 365;
        if ($y % 4 == 0) {
            $total++;
        }
    }

    // 再加当年的几个月
    switch ($thisDay["mon"]) {
        case 12:
            $total += 30;
        case 11:
            $total += 31;
        case 10:
            $total += 30;
        case 9:
            $total += 31;
        case 8:
            $total += 31;
        case 7:
            $total += 30;
        case 6:
            $total += 31;
        case 5:
            $total += 30;
        case 4:
            $total += 31;
        case 3:
            $total += 28;
        case 2:
            $total += 31;
    }

    if ($thisDay["year"] % 4 == 0 && $thisDay["mon"] > 2) {
        $total++; //如果当年是闰年还要加一天
    }

    $total = $total + $thisDay['mday'] - 1; //加当月的天数

    $flag = 0; //判断跳出循环的条件
    $j = 0;
    while ($j <= 120) { // 用农历的天数累加来判断是否超过阳历的天数
        $i = 1;
        while ($i <= 13) {
            $mtotal += $everymonth[$j][$i];
            if ($mtotal >= $total) {
                $flag = 1;
                break;
            }
            $i++;
        }
        if ($flag == 1) break;
        $j++;
    }

    if ($everymonth[$j][0] <> 0 && $everymonth[$j][0] < $i) {
        //对闰月修补
        $mm = $i - 1;
    } else {
        $mm = $i;
    }

    if ($i == $everymonth[$j][0] + 1 && $everymonth[$j][0] <> 0) {
        $nlmon = $mmonth[0] . $mmonth[$mm]; #闰月
        $numMonth = $mm;//输出农历数字格式月份
    } else {
        $nlmon = $mmonth[$mm] . $mmonth[13];
        $numMonth = $mm;
    }
    //月份的农历天数
    $dayNumOfMonth = $everymonth[$j][$mm];

    // 计算所求月份1号的农历日期
    $md = $everymonth[$j][$i] - ($mtotal - $total);
    if ($md > $everymonth[$j][$i]) {
        $md -= $everymonth[$j][$i];
    }
    $nlday = $mday[$md];
    $numDay = $md;//输出农历数字格式日期

    //完整日期，如：2011年2月2日 星期三 庚寅(虎)年十二月三十
    //$nowday = date('Y年n月j日 ', $postDate) . $weekday[$cur_wday] . ' ' . $mten[$everymonth[$j][14]].$mtwelve[$everymonth[$j][15]].'年'.$nlmon.$nlday;

    //农历数组
    $lunarCalendar = array(
        'year' => $year,
        'yearname' => $mten[$everymonth[$j][14]] . $mtwelve[$everymonth[$j][15]] . '年',
        'displaymonth' => $nlmon,
        'displayday' => $nlday,
        //'displayweek'	=> $weekday[$cur_wday],
        'month' => $numMonth,
        'day' => $numDay,
        'dayNumOfMonth' => $dayNumOfMonth//当前月份的天数
    );

    return $lunarCalendar;
}

/**
 * 检查是否为一个合法的时间格式
 *
 * @access  public
 * @param   string $time
 * @return  void
 */
function is_time($time) {
    $pattern = '/[\d]{4}-[\d]{1,2}-[\d]{1,2}\s[\d]{1,2}:[\d]{1,2}:[\d]{1,2}/';

    return preg_match($pattern, $time);
}

function is_date($time) {
    $pattern = '/[\d]{4}-[\d]{1,2}-[\d]{1,2}/';

    return preg_match($pattern, $time);
}